# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q92dBX_Q6II9dKTU-uP5M1vuNK_8jCQE
"""

import streamlit as st
import pandas as pd
import joblib
import numpy as np
import matplotlib.pyplot as plt

# ------------------------------
# Cargar modelo entrenado y OHE
# ------------------------------
modelo = joblib.load("pipeline_mlp_final.pkl")
ohe_cargado = joblib.load("one_hot_encoder.pkl")

# ------------------------------
# Funciones de agrupaci√≥n
# ------------------------------
def agrupar_fuente(fuente):
    grupos = {
       'Medios_Digitales_Online': [
        'P√°gina Web', 'FACEBOOK', 'Link', 'Correo Directo',
        'Pantalla Publicitaria Led', 'Banner','Instagram'
    ],
    'Redes_Personales_Boca_Boca': [
        'Amigos', 'Familiares', 'Estudiante', 'Docente',
        'Egresado', 'Funcionario', 'Referido Universidad Cooperat', 'Embajador Corpaeda'
    ],
    'Eventos_Ferias': [
        'Feria Universitaria', 'Visita a Colegi', 'Gu√≠as Orientaci√≥n Profesional'
    ],
    'Medios_Tradicionales_Masivos': [
        'Prensa', 'Televisi√≥n', 'Radio', 'Valla', 'Pasacalle',
        'Paradero Transporte', 'Transporte Masivo', 'Directorio Telef√≥nico'
    ]
    # Si hubiera categor√≠as no mapeadas, se podr√≠an dejar como est√°n o agruparlas en 'Otro'
    }
    for grupo, valores in grupos.items():
        if fuente in valores:
            return grupo
    return "Otro"

def agrupar_pago(pago):
    grupos = {
        'Credito_Financ_Externa': [
        'Cr√©dito ICETEX',
        'Financ por Banco o Cooperativa',
        'Cr√©dito Coop. Comuna'
    ],
    'Pago_Directo_Propio': [
        'Contado / Efectivo',
        'Tarjeta de Cr√©dito',
        'Fondo de Cesantias'
    ],
    'Apoyo_Beneficio': [
        'Beca',
        'Subsidio Empresarial'
    ],
        "Otro": ["Otro"]
    }
    for grupo, valores in grupos.items():
        if pago in valores:
            return grupo
    return "Otro"


# ------------------------------
# Configuraci√≥n de la app
# ------------------------------
st.set_page_config(page_title="Prototipo Contadur√≠a P√∫blica", page_icon="üéì", layout="centered")

st.markdown("<h1 style='text-align:center; color:#d62828;'>üéØ Prototipo de Predicciones</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align:center; color:#003049;'>Aspirantes Contadur√≠a P√∫blica</h3>", unsafe_allow_html=True)
st.write("Introduce los datos del aspirante para obtener la probabilidad de **admisi√≥n / matr√≠cula**.")

# ------------------------------
# Entrada de datos
# ------------------------------
col1, col2 = st.columns(2)

with col1:
    matematicas = st.slider("üìò Puntaje Matem√°ticas", 0, 100, 60)
    ciencias = st.slider("üî¨ Puntaje Ciencias", 0, 100, 50)
    ingles = st.slider("üá¨üáß Puntaje Ingl√©s", 0, 100, 60)
    lectura = st.slider("üìñ Puntaje Lectura Cr√≠tica", 0, 100, 55)
    sociales = st.slider("üåç Puntaje Sociales", 0, 100, 70)

with col2:
    estrato = st.selectbox("üè† Estrato", [1, 2, 3, 4, 5, 6])
    trabaja = st.selectbox("üíº Trabaja Actualmente", ["Si", "No"])
    edad = st.number_input("üéÇ Edad de inscripci√≥n", min_value=15, max_value=70, value=18)
    distancia = st.number_input("üìç Distancia a la universidad (km)", min_value=0, max_value=200, value=10)
    posible_pago_raw = st.selectbox("üí≥ Posible forma de pago", [
        "Contado / Efectivo", "Tarjeta de Cr√©dito", "Fondo de Cesantias",
        "Cr√©dito ICETEX", "Financ por Banco o Cooperativa",
        "Cr√©dito Coop. Comuna", "Beca", "Subsidio Empresarial", "Otro"
    ])
    fuente_raw = st.selectbox("üì¢ Fuente de referencia", [
        "P√°gina Web", "FACEBOOK", "Correo Directo", "Banner", "Instagram",
        "Amigos", "Familiares", "Docente", "Egresado", "Feria Universitaria",
        "Televisi√≥n", "Radio", "Otro"
    ])
    anio = st.number_input("üìÖ A√±o de inscripci√≥n", min_value=2020, max_value=2030, value=2025)
    semestre = st.selectbox("üìö Semestre", ["01", "02"])

# ------------------------------
# Preprocesamiento
# ------------------------------
df_nuevo = pd.DataFrame({
    'Edad inscripcion': [edad],
    'Ciencias': [ciencias],
    'Ingl√©s': [ingles],
    'Lectura Cr√≠tica': [lectura],
    'Matematicas': [matematicas],
    'Sociales': [sociales],
    'Distancia a Universidad (km)': [distancia],
    'A√±o': [anio],
    'Trabaja Actualmente': [trabaja],
    'Estrato': [estrato],
    'Fuente Referencia': [agrupar_fuente(fuente_raw)],
    'Posible Forma de Pago': [agrupar_pago(posible_pago_raw)],
    'Semestre': [semestre]
})



# Transformaci√≥n con OHE (ajustado al entrenamiento)
categorical_cols = ['Trabaja Actualmente', 'Estrato', 'Fuente Referencia', 'Posible Forma de Pago','Semestre']
numerical_cols = [col for col in df_nuevo.columns if col not in categorical_cols]
# Forzar que todas las categ√≥ricas sean string (igual que en entrenamiento)
for col in categorical_cols:
    df_nuevo[col] = df_nuevo[col].astype(str)

datos_encoded = ohe_cargado.transform(df_nuevo[categorical_cols])
encoded_df = pd.DataFrame(datos_encoded, columns=ohe_cargado.get_feature_names_out())

df_final = pd.concat([
    df_nuevo.drop(columns=["Estrato", "Trabaja Actualmente", "Fuente Referencia", "Posible Forma de Pago", "Semestre"]).reset_index(drop=True),
    encoded_df.reset_index(drop=True)
], axis=1)

# Reordenar seg√∫n el modelo
if hasattr(modelo, "feature_names_in_"):
    df_final = df_final.reindex(columns=modelo.feature_names_in_, fill_value=0)

# ------------------------------
# Predicci√≥n
# ------------------------------
if st.button("üîÆ Predecir"):
    pred = modelo.predict(df_final)[0]
    prob = modelo.predict_proba(df_final)[0][1]

    st.markdown("## üìå Resultado de la predicci√≥n")

    col1, col2 = st.columns([1,2])

    with col1:
        st.metric(label="Clase predicha", value="‚úÖ Matr√≠cula" if pred==1 else "‚ùå Admisi√≥n")

    with col2:
        st.progress(int(prob*100))
        st.write(f"**Probabilidad de matr√≠cula:** {prob:.2f}")

    # Gr√°fico circular de probabilidad
    fig, ax = plt.subplots()
    ax.pie([prob, 1-prob], labels=["Matr√≠cula", "Admisi√≥n"], autopct="%1.1f%%", colors=["#2a9d8f", "#e76f51"])
    ax.set_title("Distribuci√≥n de probabilidad")
    st.pyplot(fig)

    # Explicaci√≥n textual
    if prob >= 0.6:
        st.success("El modelo estima una **alta probabilidad** de matr√≠cula.")
    elif prob >= 0.4:
        st.warning("El modelo estima una **probabilidad intermedia**. Requiere atenci√≥n adicional.")
    else:
        st.error("El modelo estima una **baja probabilidad** de matr√≠cula.")